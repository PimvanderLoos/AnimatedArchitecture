package nl.pim16aap2.animatedarchitecture.core.api.debugging;

import lombok.AllArgsConstructor;
import lombok.extern.flogger.Flogger;
import nl.pim16aap2.animatedarchitecture.core.api.IAnimatedArchitecturePlatformProvider;
import nl.pim16aap2.util.SafeStringBuilder;
import org.jetbrains.annotations.Nullable;

@Flogger
@AllArgsConstructor
public abstract class DebugReporter
{
    private final DebuggableRegistry debuggableRegistry;
    protected final IAnimatedArchitecturePlatformProvider platformProvider;

    /**
     * Gets the data-dump containing useful information for debugging issues.
     */
    public final String getDebugReport()
    {
        final SafeStringBuilder sb = new SafeStringBuilder("AnimatedArchitecture debug dump:\n");

        System.getProperties()
              .forEach((key, val) -> sb.append(String.format("%-30s", key)).append(": ").append(val).append('\n'));

        sb.append("\n")
          .append("AnimatedArchitecture version: ")
          .append(() -> platformProvider
              .getPlatform()
              .map(platform -> platform.getProjectVersion().toString())
              .orElse("NULL"))
          .append('\n')
          .append("Registered Platform: ")
          .append(() -> platformProvider.getPlatform().map(platform -> platform.getClass().getName()).orElse("NULL"))
          .append('\n')

          .append(this::getAdditionalDebugReport0)
          .append('\n');

        for (final IDebuggable debuggable : debuggableRegistry.getDebuggables())
            appendDebuggable(sb, debuggable);

        return sb.toString();
    }

    private static void appendDebuggable(SafeStringBuilder sb, IDebuggable debuggable)
    {
        final String debuggableName = debuggable.getClass().getName();
        @Nullable String msg;

        try
        {
            msg = debuggable.getDebugInformation();
            if (msg == null || msg.isBlank())
                msg = "Nothing to log!";
        }
        catch (Throwable t)
        {
            log.atSevere().withCause(t).log("Failed to get debug information for class: %s", debuggableName);
            msg = "ERROR";
        }

        sb.append(debuggableName).append(":\n");
        sb.appendIndented(2, msg);
    }

    private String getAdditionalDebugReport0()
    {
        try
        {
            return getAdditionalDebugReport();
        }
        catch (Exception e)
        {
            log.atSevere().withCause(e).log("Failed to get additional debug data!");
            return "ERROR";
        }
    }

    /**
     * Gets the additional debug report generated by the subclass.
     *
     * @return The formatted additional debug report. This is appended to the general debug report.
     */
    protected abstract String getAdditionalDebugReport();

    @Override
    public final String toString()
    {
        return getDebugReport();
    }
}
